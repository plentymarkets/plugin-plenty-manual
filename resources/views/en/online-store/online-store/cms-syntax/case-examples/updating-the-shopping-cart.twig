<aside class="plenty-anchor-navbar">
    <div class="sticky-wrapper">
        <div class="sticky-container" data-fn="sticky-container" data-fn-options="{ onLoadHashScrollToLink: true }">
            
        </div>
    </div>
</aside>

<main id="main">
    <h1>Updating the shopping cart</h1><div class="sect1">
<h2 id="_updating_the_shopping_cart_with_user_feedback">Updating the shopping cart with user feedback</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The <a href="/en/cms-syntax/rest-api">REST API</a> makes it possible to update elements in the online store without having to reload the entire page. In this example, the REST API is used to update the number of items in the shopping cart and to display a preview of the shopping cart for three seconds after the customer has added an item to it.</p>
</div>
<div class="paragraph">
<p>REST URIs that are used:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="/en/omni-channel/online-store/setting-up-clients/_cms-syntax/case-examples/updating-the-shopping-cart#checkout/basketitemslist">POST /rest/checkout/basketitemslist/</a></p>
</li>
<li>
<p><a href="/en/omni-channel/online-store/setting-up-clients/_cms-syntax/case-examples/updating-the-shopping-cart#checkout/basketitemslist">GET /rest/checkout/basketitemslist/</a></p>
</li>
<li>
<p><a href="/en/omni-channel/online-store/setting-up-clients/_cms-syntax/case-examples/updating-the-shopping-cart#itemview/container_itemviewbasketpreviewlist">GET /rest/itemview/container_itemviewbasketpreviewlist/</a></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The code displayed in this example can be inserted after any button that is used for ItemView templates and that has a CLASS attribute with the value <strong>add_Basket_Item</strong>.</p>
</div>
</div>
</div><div class="sect1">
<h2 id="_requirements">Requirements</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The following requirements must be met for this case example:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Basic knowledge of the framework jQuery</p>
</li>
<li>
<p>Use of the design callisto_light</p>
</li>
</ul>
</div>
</div>
</div><div class="sect1">
<h2 id="_saving_items_on_the_server">Saving items on the server</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Use the REST URI <strong>/rest/checkout/basketitemslist/</strong> with the POST method to save items in the shopping cart on the server.</p>
</div>
<div class="paragraph">
<p>An example call is displayed below. It sends an item to the server via REST.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-plenty" data-lang="plenty">&lt;script type="text/javascript"&gt;
	{# Sends the items to the server via REST method. #}
	$.ajax(
		"/rest/checkout/basketitemslist/",
		{
			type: 'POST',
			dataType: 'json',
			data: article,
			success: function ()
			{
				{#
					This function is carried out if the items
					are successfully saved on the server.
				#}
			},
			error: function ()
			{
				{# Troubleshooting #}
			}
		}
	);
&lt;/script&gt;</code></pre>
</div>
</div>
</div>
</div><div class="sect1">
<h2 id="_updating_the_frontend">Updating the frontend</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Once an item has been placed in the shopping cart on the server, the elements in the frontend need to be updated so that the customer sees the new item quantity. First, the REST interface queries the new number of items in the shopping cart.</p>
</div>
<div class="sect2">
<h3 id="_calculating_the_number_of_items_in_the_shopping_cart">Calculating the number of items in the shopping cart</h3>
<div class="paragraph">
<p>Use the REST URI <strong>/rest/checkout/basketitemslist/</strong> with the GET method to query the current number of items in the shopping cart.</p>
</div>
<div class="paragraph">
<p>Customers might place several copies of some items in the shopping cart and only one copy of other items. As such, it is necessary to iterate all of the items and add up the total quantity. The items in the shopping cart are located in the <em>data</em> array of the response object, which is passed to the success function. The property <strong>BasketItemQuantity</strong> indicates the quantity of an item. The jQuery element <strong>$('#basket_quantity')</strong> is updated once the total number of items in the shopping cart has been calculated. This element displays the number of items in the shopping cart.</p>
</div>
<div class="paragraph">
<p>An example REST call is displayed below. It queries and adds the number of items in the shopping cart.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-plenty" data-lang="plenty">&lt;script type="text/javascript"&gt;
	{#
		Retrieves the current status of the shopping cart.

		This example code demonstrates how to calculate the number of items
		within the shopping cart and how to manipulate the frontend
		to update the shopping cart preview.
	#}
	$.ajax(
		"/rest/checkout/basketitemslist/",
		{
			type: 'GET',
			dataType: 'json',
			{#
				The success function is carried out if the current status
				of the shopping cart was successfully retrieved.
			#}
			success: function(response)
			{
				{# Calculates the number of items in the shopping cart. #}
				var count = 0;
				$.each(response.data, function(i, el)
				{
					count += el.BasketItemQuantity;
				});

				{# Replaces number of items in the shopping cart in the header menu. #}
				$('#basket_quantity').text(count);

				{# Unlocks shopping cart menu if shopping cart was previously empty. #}
				$("[data-plenty-basket-empty]").removeClass("disabled");
			},
			error: function()
			{
				{# Troubleshooting #}
			}
		}
	);
&lt;/script&gt;</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_updating_the_shopping_cart_list">Updating the shopping cart list</h3>
<div class="paragraph">
<p>In this step, the old shopping cart list is replaced by the new list. The REST URI <strong>/rest/itemview/container_itemviewbasketpreviewlist/</strong> returns an HTML fragment, which simply needs to be inserted at the appropriate location.</p>
</div>
<div class="paragraph">
<p>Just as in the previous example, the HTML fragment is located in the response object, which is passed to the success function. It is also located in the <em>data</em> array. Use the jQuery selector <strong>$('[data-plenty-remotetabs-id="aside"]')</strong> to select the HTML element that contains the shopping cart preview in the design callisto_light. The old shopping cart list is removed by applying the jQuery function empty() to the selected element. This ensures that multiple copies of the shopping cart list are not displayed in the shopping cart preview. Use the jQuery selector <strong>$(".isBasketPreview &gt; .dropdown-menu")</strong> to display the shopping cart preview for a few seconds. We recommend using the native JavaScript function <strong>setTimeout()</strong> to specify when the shopping cart preview should disappear.</p>
</div>
<div class="paragraph">
<p>An example code is displayed below. It updates the shopping cart preview and displays the shopping cart for three seconds.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-plenty" data-lang="plenty">&lt;script type="text/javascript"&gt;
	{#
		Updates the shopping cart list in the shopping cart preview.

		The REST URI returns an HTML fragment with a list of the items
		located in the shopping cart.
		If the retrieval is successful, then the old shopping cart list is
		replaced by the new listed generated by the server. Then the
		shopping cart preview is displayed for 3 seconds.
	#}
	$.ajax(
		"/rest/itemview/container_itemviewbasketpreviewlist/",
		{
			type: "GET",
			dataType: "json",
			{#
				The success function is carried out if the current list
				of shopping cart content was successfully retrieved.
			#}
			success: function(response)
			{
				{#
					The function "empty()" removes the "old" shopping cart list.
					Then the container with the new list is inserted.
				#}
				$('[data-plenty-remotetabs-id="aside"]').empty().append($(response.data[0]));

				{# Displays the shopping cart. #}
				$(".isBasketPreview &gt; .dropdown-menu").fadeIn();
				setTimeout(function()
				{
					{# Hides the shopping cart after 3 seconds. #}
					$(".isBasketPreview &gt; .dropdown-menu").removeAttr("style");
				}, 3000);
			},
			error: function()
			{
				{# Troubleshooting	#}
			}
		}
	);
&lt;/script&gt;</code></pre>
</div>
</div>
</div>
</div>
</div><div class="sect1">
<h2 id="_summarized_example_code">Summarized example code</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The following example code includes all of the operations that were described on this page. They update the number of items in the shopping cart, update the shopping cart in the header area and display the shopping cart preview for three seconds.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-plenty" data-lang="plenty">{#
	In this example, a click event is added to a button element. It
	- places a selected item in the shopping cart on the server,
	- retrieves the new content of the shopping cart,
	- calculates the number of items in the shopping cart,
	- requests a current list of items in the shopping cart as an HTML fragment
	  from the server,
	- replaces the old shopping cart list with the new list and
	- displays the shopping cart preview for 3 seconds.
#}
&lt;button type="button" class="btn btn-primary add_To_Basket"&gt;
	&lt;span class="glyphicon glyphicon-shopping-cart"&gt;&lt;/span&gt; add to shopping cart
&lt;/button&gt;
&lt;script type="text/javascript"&gt;
	(function($)
	{
		{# Minimal example of an item object. #}
		var article = JSON.stringify(
					[{
						BasketItemItemID: $ID, 			{# ID of the item to be placed in the shopping cart. #}
						BasketItemPriceID: $PriceID, 	{# ID of the price set for the item. #}
						BasketItemQuantity: 1 			{# The number of items in the shopping cart. #}
					}]);

		{# Adds a click event to buttons with the CSS class "add_To_Basket". #}
		$(".add_To_Basket").click(function()
		{
			{# Sends the items to the server via the REST method. #}
			$.ajax(
				"/rest/checkout/basketitemslist/",
				{
					type: 'POST',
					dataType: 'json',
					data: article,
					success: function ()
					{
						{#
							This function is carried out if the items
							are successfully saved on the server.
						#}

						{# Retrieves the new/current status of the shopping cart. #}
						$.ajax(
							"/rest/checkout/basketitemslist/",
							{
								type: 'GET',
								dataType: 'json',
								success: function(response)
								{
									{#
										This function is carried out if
										the current status of the shopping
										cart was successfully retrieved.
									#}

									var count = 0;
									$.each(response.data, function(i, el)
									{
										count += el.BasketItemQuantity;
									});

									{#
										Replaces the number of items in the
										shopping cart in the header menu.
									#}
									$('#basket_quantity').text(count);

									{#
										Unlocks the shopping cart menu if the
										shopping cart was previously empty.
									#}
									$("[data-plenty-basket-empty]").removeClass("disabled");
								},
								error: function()
								{
									{# Troubleshooting #}
								}
							}
						);

						{#
							Updates the shopping cart list in the shopping cart preview.

							The REST URI returns an HTML fragment with a list of the
							items located in the shopping cart.
						#}
						$.ajax(
							"/rest/itemview/container_itemviewbasketpreviewlist/",
							{
								type: "GET",
								dataType: "json",
								success: function(response)
								{
									{#
										This function is carried out if the
										current list of shopping cart content
										was successfully retrieved.
									#}

									{#
										The function "empty()" removes the "old"
										shopping cart list. Then the container
										with the new list is inserted.
									#}
									$('[data-plenty-remotetabs-id="aside"]').empty().append($(response.data[0]));

									{# Displays the shopping cart. #}
									$(".isBasketPreview &gt; .dropdown-menu").fadeIn();
									setTimeout(function()
									{
										{# Hides the shopping cart after 3 seconds. #}
										$(".isBasketPreview &gt; .dropdown-menu").removeAttr("style");
									}, 3000);
								},
								error: function()
								{
									{# Troubleshooting	#}
								}
							});
					},
					error: function ()
					{
						{# Troubleshooting #}
					}
				}
			);
		});
	})(jQuery);
&lt;/script&gt;</code></pre>
</div>
</div>
</div>
</div>
</main>