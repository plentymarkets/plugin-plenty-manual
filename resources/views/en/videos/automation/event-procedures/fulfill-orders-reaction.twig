<aside class="plenty-anchor-navbar">
    <div class="sticky-wrapper">
        <div class="sticky-container" data-fn="sticky-container" data-fn-options="{ onLoadHashScrollToLink: true }">
            
        </div>
    </div>
</aside>

<main id="main">
    <h1>Using event procedures to automatically fulfill orders</h1><table class="tableblock frame-all grid-none stretch">
<colgroup>
<col style="width: 66.6666%;">
<col style="width: 33.3334%;">
</colgroup>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Did you know that you can link event procedures together like dominoes? Set up a simple chain reaction and automate complex fulfillment processes.</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="/en/videos/automation/event-procedures/fulfill-orders-link#video">Linking event procedures together (0:54)</a></p>
<p class="tableblock"><a href="/en/videos/automation/event-procedures/fulfill-orders-problem#video">The problem with "one big event procedure" (1:49)</a></p>
<p class="tableblock"><a href="/en/videos/automation/event-procedures/fulfill-orders-reaction#video">Setting off the chain reaction (2:42)</a></p></td>
</tr>
</tbody>
</table><div class="videoblock">
<div class="content">
<iframe src="https://player.vimeo.com/video/231663016#at=162" frameborder="0" allowfullscreen=""></iframe>
</div>
</div><div class="openblock collapseBox">
<div class="title">Transcript</div>
<div class="content">
<div class="paragraph">
<p>Sometimes it feels like there are a million little tasks that go into shipping orders. And if you’ve ever tried to juggle it all on your own, then you’ll know just how difficult and time-consuming it can be. But don’t worry! Lady event procedure is here to help.
In the last video, she showed you how to create event procedures in your system. But did you know that you can also link event procedures together? Just think of them like a row of dominoes, where one event procedure triggers the next, then the next, and so on.</p>
</div>
<div class="paragraph">
<p>You can use this simple logic to automate complex fulfillment processes. Just spend some time brainstorming how your company ships orders.
For example, let’s say that once you’ve finished packing an order, you switch its status to 6 to indicate that it’s ready for shipping.
Then you book the items included in the order as outgoing.
You generate the invoice.
And lastly, you email that invoice to your customer.</p>
</div>
<div class="paragraph">
<p>Each little step of this fulfillment process can be broken down into an individual event procedure. Let me show you what I mean.
So remember, in this example, orders are switched to status 6 when they’re ready to be shipped. So we’ll use this status change as the triggering event that sets off our entire chain reaction.
And as soon as the order changes to status 6, we want to book all of the items included in that order as outgoing.
And this procedure "Book outgoing items" becomes the triggering event that sets off the next step of our fulfillment process.
This time, the event causes the customer’s invoice to be generated.
And again in turn, this procedure becomes the next triggering event which then e-mails this invoice to the customer.
So here you can really see what I mean by setting up event procedures like dominoes.
This first event procedure triggers the second which then triggers the third.</p>
</div>
<div class="paragraph">
<p>Now at this point, you may be asking yourself, "why don’t I just create one big event procedure" that does everything at the same time?
Well, be careful. Even though it seems like a good idea at first glance, things can easily go wrong.
The problem here is that procedures aren’t carried out sequentially, one after the other.
Rather, they’re all started at the same time, so whichever procedure is the quickest, ends up finishing first.
In practice, it usually takes a few milliseconds longer to generate a document than it does to send out an email.
So if you put both of these procedures together in one event, then you run the risk of having your email sent out before the invoice has been attached to it.
Not worth the risk. It’s much safer to set up event procedures that run one after the other like a long line of dominoes.</p>
</div>
<div class="paragraph">
<p>And speaking of dominoes, now that we’ve set them up, let’s knock them down!
Here I’ve got an order that’s currently in status 5 and is ready for shipping.
All I need to do is switch the order status to 6 and this sets off the chain reaction.
Suddenly I see that items have been booked as outgoing an invoice has been generated and it’s been sent to my customer.
Just like that, event procedures turn even the longest to-do list into a quick chain-reaction!</p>
</div>
</div>
</div>
</main>